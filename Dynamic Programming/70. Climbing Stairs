## [70. Climbing Stairs](https://leetcode.com/problems/climbing-stairs/)
You can either climb up by 1 or by 2.
Check both, when you reach the last stair, return 1
recursively add `helper(i+1)` and `helper(i+2)` so as to get the sum of all possibilities
If stair reached is out of bounds, return 0 so that it doesnt contribute to sum

### Memoization
```cpp
class Solution {
public:
    int helper(int i, int& n, vector<int>& dp){
        if(i==n) return 1;
        if(i>n) return 0;
        if(dp[i]!=-1) return dp[i];
        return dp[i]= helper(i+1,n, dp)+helper(i+2,n,dp);
    }
    int climbStairs(int n) {
        vector<int>dp(n,-1);
        return helper(0,n,dp);
    }
};
```
