## [55. Jump Game](https://leetcode.com/problems/jump-game/)
The solution doesn't involve dynamic programming at all.
Simply stated, you must run through the array, and find the maximum jump reach up till that point
This is given by `i+nums[i]`
the `i>maxReach` condition is set up so as to avoid instances at (say element index x), wherein you can reach the end of the array from `x` but cannot reach `x` from `index 0`
```cpp
class Solution {
public:
    bool canJump(vector<int>& nums) {
        int maxReach = 0;
        for(int i=0; i<nums.size(); i++){
            if (i>maxReach) return false;
            maxReach = max(i+nums[i], maxReach);
            if (maxReach == nums.size()) return true;
        }
        return true;
    }
};
```
